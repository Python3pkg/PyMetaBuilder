{"name":"Pymetabuilder","tagline":"metabuilder","body":"# PyMetaBuilder\r\n\r\n## Introduction\r\n\r\nSmall framework to create entities and Builders with Metaprogramming features in Python.\r\nThis project is based on the Ruby implementation made by [dlitvakb] (https://www.github.com/dlitvakb) [MetaBuilder] (https://github.com/dlitvakb/MetaBuilder)\r\n\r\n## Installation\r\n\r\nto install pymetabuilder to it's last stable release, just do:\r\n\r\n```\r\n$ pip install PyMetabuilder\r\n```\r\n\r\nif you want to download another version or the tarball of the last build, go to: https://pypi.python.org/pypi/PyMetabuilder\r\n\r\n## Creating Builders\r\n\r\nMetabuilder objective is to help to create Builders and instances or entities with validations easy and fast.\r\n\r\nIn order to create a new Builder just define a class extending from MetaBuilder class, and defining an stub class\r\nin any place you want. For eg.\r\n\r\n```python\r\nfrom PyMetaBuilder import MetaBuilder\r\n\r\n#Stub Class to create instances from\r\nclass Kite(object):\r\n    pass\r\n\r\nclass KiteBuilder(MetaBuilder):\r\n    pass\r\n```\r\n> **note**\r\n>\r\n> from version 0.2.1 onwards you can define the class model with the\r\n> method model_by_name, thus you don't have to define a stub class in your code.\r\n> For ex. calling model_by_name('Kite') instead of model(Kite)\r\n\r\nAfter that just initiate the superclass and start defining the properties you want KiteBuilder to have, for eg.\r\n\r\n```python\r\nclass KiteBuilder(MetaBuilder):\r\n\r\n    def __init__(self):\r\n        MetaBuilder.MetaBuilder.__init__(self)\r\n        self.defineKite()\r\n\r\n    def define_kite(self):\r\n        #define the model klass to get instances from\r\n        self.model(Kite)\r\n        self.property(\"design\",one_of=[\"Indoor\",\"Water Kite\",\"Kythoon\"])\r\n        self.property(\"line_material\",type=str)\r\n        self.property(\"StringLength\",type=int)\r\n```\r\n\r\nYou can also define a property as a mandatory one, with the required method. In this way, when you set the builder\r\nwith the respecting properties and try to get a new instance, the framework will check if the properties that you\r\npreviously set as mandatory were set.\r\n\r\n```python\r\n       def define_kite(self):\r\n        #define the model klass to get instances from\r\n        self.model(Kite)\r\n        self.property(\"StringLength\",type=int)\r\n        #code defining properties....\r\n        self.required(\"design\")\r\n```\r\n\r\n##Creating instances from a Builder\r\n\r\nAfter you defined a builder and its properties, just set the parameters, if you want at this time and if they're not\r\nmandatory and build an instance.\r\n\r\n```python\r\n       kiteBuilder=KiteBuilder()\r\n       kiteBuilder.design=\"Indoor\"\r\n       kiteBuilder.StringLength=23\r\n\r\n       kite=kiteBuilder.build() #get a Kite instance\r\n```\r\n\r\nWhen you set a property that you previously defined, it'll validate the value passed, given the fact that you have\r\nset it with validators, and will generate the appropriate exception when it fails.\r\n\r\n## Mantainer\r\n\r\nCurrently this package is being mantained by @bossiernesto","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}